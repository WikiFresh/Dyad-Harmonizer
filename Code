# scipy.fftpack is deprecated, use scipy.fft once FFT makes sense

import sounddevice as sd
import scipy
import numpy as np
from scipy.io import wavfile as wav
from scipy.io.wavfile import write ,read
from scipy import fftpack as scfft
#from scipy.fft import fft, fftfreq
from matplotlib import pyplot as plt

# 1. Record sound from computer microphone:

rec_duration_s = 3
# Samples per second and recording duration
sps_hz = 44100
# Terminal prompt
print('Please begin recording:')
sd.wait()
print('3')
sd.wait()
print('2')
sd.wait()
print('1')
sd.wait()
print('START')
my_recording = sd.rec(int(rec_duration_s * sps_hz), samplerate=sps_hz, channels=1)
sd.wait()
write('output.wav', sps_hz, my_recording)



# 2. Apply FFT on recording to get highest audible frequency:
fs_rate, signal = read("output.wav")
l_audio = len(signal.shape)
N = signal.shape[0]
secs = N / float(fs_rate)
Ts = 1.0/fs_rate
t = scipy.arange(0, secs, Ts)
FFT = abs(scipy.fft(signal))
FFT_side = FFT[range(N//2)]
freqs = scipy.fftpack.fftfreq(signal.size, t[1]-t[0])
fft_freqs = np.array(freqs)
freqs_side = freqs[range(N//2)]
fft_freqs_side = np.array(freqs_side)
volume=np.array(abs(FFT_side))
audible=np.where(volume>5)
HighestAudibleFrequency=max(freqs_side[audible])

# is this in Hz?
print(HighestAudibleFrequency)



# 4. Generate a tone:
# NOTE: This currently just saves the file but doesn't play it, this should be fixed soon
tone_duration_s = 5

# To find the fifth of a note, multiply its frequency by 1.5
# NOTE: Replace 440 with HighestAudibleFrequency once the Fourier issue is resolved
fifth_freq_hz = int(440 * 1.5)

each_sample_number = np.arange(tone_duration_s * sps_hz)
waveform = np.sin(2 * np.pi * each_sample_number * fifth_freq_hz / sps_hz)
# Tone down the amplitude by a factor of 0.3
waveform_quiet = waveform * 0.3
# Convert to 16 bits (2^16 = 65536, 65536/2 = 32768 (x-axis to peak))
waveform_integers = np.int16(waveform_quiet * 32768)
write('perfect_fifth_sine.wav', sps_hz, waveform_integers)
